"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Leap
 * The Official Leap API
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This file is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isBrowser = exports.createRequestFunction = exports.removeTrailingSlash = exports.toPathString = exports.serializeDataIfNeeded = exports.setSearchParams = exports.setBearerAuthToObject = exports.setBasicAuthToObject = exports.setApiKeyToObject = exports.assertParamExists = exports.DUMMY_BASE_URL = void 0;
const base_1 = require("./base");
const axios_1 = require("axios");
const requestAfterHook_1 = require("./requestAfterHook");
const requestBeforeUrlHook_1 = require("./requestBeforeUrlHook");
const error_1 = require("./error");
/**
 *
 * @export
 */
exports.DUMMY_BASE_URL = 'https://example.com';
/**
 *
 * @throws {RequiredError}
 * @export
 */
const assertParamExists = function (functionName, paramName, paramValue) {
    if (paramValue === null || paramValue === undefined) {
        throw new base_1.RequiredError(paramName, `Required parameter ${paramName} was null or undefined when calling ${functionName}.`);
    }
};
exports.assertParamExists = assertParamExists;
/**
 *
 * @export
 */
const setApiKeyToObject = function ({ object, key, type, keyParamName, configuration, prefix }) {
    return __awaiter(this, void 0, void 0, function* () {
        key = key ? key : keyParamName;
        let apiKey = null;
        if (configuration && configuration.apiKey) {
            if (typeof configuration.apiKey === 'function')
                apiKey = yield configuration.apiKey(keyParamName);
            else if (typeof configuration.apiKey === 'string')
                apiKey = configuration.apiKey;
            else if (typeof configuration.apiKey === 'object') {
                if (keyParamName in configuration.apiKey)
                    apiKey = configuration.apiKey[keyParamName];
            }
            else
                throw Error(`Unexpected type ${typeof configuration.apiKey} for Configuration.apiKey`);
        }
        if (!apiKey)
            return;
        object[key] = prefix !== undefined ? `${prefix}${apiKey}` : apiKey;
        if (type === "Cookie")
            object[key] = `${keyParamName}=${object[key]}`;
    });
};
exports.setApiKeyToObject = setApiKeyToObject;
/**
 *
 * @export
 */
const setBasicAuthToObject = function (object, configuration) {
    if (configuration && (configuration.username || configuration.password)) {
        object["auth"] = { username: configuration.username, password: configuration.password };
    }
};
exports.setBasicAuthToObject = setBasicAuthToObject;
/**
 *
 * @export
 */
const setBearerAuthToObject = function (object, configuration) {
    return __awaiter(this, void 0, void 0, function* () {
        if (configuration && configuration.accessToken) {
            const accessToken = typeof configuration.accessToken === 'function'
                ? yield configuration.accessToken()
                : yield configuration.accessToken;
            object["Authorization"] = "Bearer " + accessToken;
        }
    });
};
exports.setBearerAuthToObject = setBearerAuthToObject;
function setFlattenedQueryParams(urlSearchParams, parameter, key = "") {
    if (typeof parameter === "object") {
        if (Array.isArray(parameter)) {
            parameter.forEach(item => setFlattenedQueryParams(urlSearchParams, item, key));
        }
        else {
            Object.keys(parameter).forEach(currentKey => setFlattenedQueryParams(urlSearchParams, parameter[currentKey], `${key}${key !== '' ? '.' : ''}${currentKey}`));
        }
    }
    else {
        if (urlSearchParams.has(key)) {
            urlSearchParams.append(key, parameter);
        }
        else {
            urlSearchParams.set(key, parameter);
        }
    }
}
/**
 *
 * @export
 */
const setSearchParams = function (url, ...objects) {
    const searchParams = new URLSearchParams(url.search);
    setFlattenedQueryParams(searchParams, objects);
    url.search = searchParams.toString();
};
exports.setSearchParams = setSearchParams;
/**
 *
 * @export
 */
const serializeDataIfNeeded = function (value, requestOptions, configuration) {
    const nonString = typeof value !== 'string';
    const needsSerialization = nonString && configuration && configuration.isJsonMime
        ? configuration.isJsonMime(requestOptions.headers['Content-Type'])
        : nonString;
    return needsSerialization
        ? JSON.stringify(value !== undefined ? value : {})
        : (value || "");
};
exports.serializeDataIfNeeded = serializeDataIfNeeded;
/**
 *
 * @export
 */
const toPathString = function (url) {
    return (0, exports.removeTrailingSlash)(url.pathname) + url.search + url.hash;
};
exports.toPathString = toPathString;
/**
 * remove trailing slash from string
 */
const removeTrailingSlash = function (url) {
    return url.replace(/\/$/, "");
};
exports.removeTrailingSlash = removeTrailingSlash;
/**
 * Wrap an axios request in a try/catch block to catch network errors and parse the response body
 */
function wrapAxiosRequest(makeRequest) {
    var _a, _b, _c;
    return __awaiter(this, void 0, void 0, function* () {
        try {
            return yield makeRequest();
        }
        catch (e) {
            if (e instanceof axios_1.AxiosError && e.isAxiosError) {
                try {
                    const responseBody = ((_a = e.response) === null || _a === void 0 ? void 0 : _a.data) instanceof ReadableStream
                        ? yield (0, error_1.readableStreamToString)(e.response.data)
                        : (_b = e.response) === null || _b === void 0 ? void 0 : _b.data;
                    throw new error_1.LeapError(e, (0, error_1.parseIfJson)(responseBody));
                }
                catch (innerError) {
                    if (innerError instanceof ReferenceError) {
                        // Got: "ReferenceError: ReadableStream is not defined"
                        // This means we are in a Node environment so just throw the original error
                        throw new error_1.LeapError(e, (_c = e.response) === null || _c === void 0 ? void 0 : _c.data);
                    }
                    if (innerError instanceof error_1.LeapError) {
                        // Got "LeapError" from the above try block
                        throw innerError;
                    }
                    // Something unexpected happened: propagate the error
                    throw e;
                }
            }
            throw e;
        }
    });
}
/**
 *
 * @export
 */
const createRequestFunction = function (axiosArgs, globalAxios, BASE_PATH, configuration) {
    return (axios = globalAxios, basePath = BASE_PATH) => __awaiter(this, void 0, void 0, function* () {
        (0, requestBeforeUrlHook_1.requestBeforeUrlHook)({ axiosArgs, basePath, configuration });
        const url = ((configuration === null || configuration === void 0 ? void 0 : configuration.basePath) || basePath) + axiosArgs.url;
        yield (0, requestAfterHook_1.requestAfterHook)({ axiosArgs, basePath, url, configuration });
        return wrapAxiosRequest(() => __awaiter(this, void 0, void 0, function* () { return yield axios.request(Object.assign(Object.assign({}, axiosArgs.options), { url })); }));
    });
};
exports.createRequestFunction = createRequestFunction;
function isBrowser() {
    return typeof window !== "undefined";
}
exports.isBrowser = isBrowser;
