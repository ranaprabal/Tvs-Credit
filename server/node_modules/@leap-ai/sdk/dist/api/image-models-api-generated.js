"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Leap
 * The Official Leap API
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This file is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImageModelsApiGenerated = exports.ImageModelsApiFactory = exports.ImageModelsApiFp = exports.ImageModelsApiAxiosParamCreator = void 0;
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
const browser_1 = require("file-type/browser");
const FormData = require("form-data");
// @ts-ignore
const base_1 = require("../base");
const requestBeforeHook_1 = require("../requestBeforeHook");
/**
 * ImageModelsApi - axios parameter creator
 * @export
 */
const ImageModelsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * This endpoint will delete a model. This is not reversible.
         * @summary Delete a Model
         * @param {string} modelId The ID of the model to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteModel: (modelId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'modelId' is not null or undefined
            (0, common_1.assertParamExists)('deleteModel', 'modelId', modelId);
            const localVarPath = `/api/v2/images/models/{modelId}`
                .replace(`{${"modelId"}}`, encodeURIComponent(String(modelId !== undefined ? modelId : `-modelId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = configuration && !(0, common_1.isBrowser)() ? { "User-Agent": configuration.userAgent } : {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            (0, requestBeforeHook_1.requestBeforeHook)({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * This endpoint will return a single model.
         * @summary Get a Single Model
         * @param {string} modelId The ID of the model to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getModel: (modelId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'modelId' is not null or undefined
            (0, common_1.assertParamExists)('getModel', 'modelId', modelId);
            const localVarPath = `/api/v2/images/models/{modelId}`
                .replace(`{${"modelId"}}`, encodeURIComponent(String(modelId !== undefined ? modelId : `-modelId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = configuration && !(0, common_1.isBrowser)() ? { "User-Agent": configuration.userAgent } : {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            (0, requestBeforeHook_1.requestBeforeHook)({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * This endpoint will return a list of all models for the workspace.
         * @summary List All Models
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllModels: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/v2/images/models`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = configuration && !(0, common_1.isBrowser)() ? { "User-Agent": configuration.userAgent } : {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            (0, requestBeforeHook_1.requestBeforeHook)({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Upload a few image samples, and train a new model. Training usually takes 20-40 minutes. To be notified when the model completes training you must provide a `webhookUrl` in the training request, or check for completion by calling [Get a Single Model](https://reference.tryleap.ai/reference/get-model-1). After training completes, you can use the model to generate images with [Generate Images](https://reference.tryleap.ai/reference/inferencescontroller_create-1).
         * @summary Train Model
         * @param {string} [name] Provide a name so you can more easily identify the model.
         * @param {string} [subjectKeyword] This is the keyword you will use during image generation to trigger your custom subject. For example \\\&quot;a photo of @me\\\&quot;.
         * @param {string} [subjectType] The subject type - a short description, usually a noun, that describes what the underlying model is learning. For example: person, man, woman, cat, dog, icon, style. Defaults to \\\&quot;person\\\&quot;.
         * @param {string} [webhookUrl] An optional webhook URL that will be called with a POST request when the model completes training or fails.
         * @param {Array<string>} [imageSampleUrls] An array of strings containing the URLs of the images to upload. Either this or imageSampleFiles is required, but not both.
         * @param {Array<Uint8Array | File>} [imageSampleFiles] An array of files containing the images to upload. Either this or imageSampleUrls is required, but not both.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trainModel: (name, subjectKeyword, subjectType, webhookUrl, imageSampleUrls, imageSampleFiles, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/v2/images/models/new`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = configuration && !(0, common_1.isBrowser)() ? { "User-Agent": configuration.userAgent } : {};
            const localVarQueryParameter = {};
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();
            // authentication bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            if (name !== undefined) {
                localVarFormParams.append('name', name);
            }
            if (subjectKeyword !== undefined) {
                localVarFormParams.append('subjectKeyword', subjectKeyword);
            }
            if (subjectType !== undefined) {
                localVarFormParams.append('subjectType', subjectType);
            }
            if (webhookUrl !== undefined) {
                localVarFormParams.append('webhookUrl', webhookUrl);
            }
            if (imageSampleUrls) {
                localVarFormParams.append('imageSampleUrls', imageSampleUrls.join(base_1.COLLECTION_FORMATS.csv));
            }
            if (imageSampleFiles) {
                const baseName = 'imageSampleFiles';
                for (const element of imageSampleFiles) {
                    if (element instanceof Uint8Array) {
                        // Node.js
                        const { ext } = yield (0, browser_1.fromBuffer)(element);
                        localVarFormParams.append(baseName, element, `${baseName}.${ext}`);
                    }
                    else if ("name" in element) {
                        // Browser
                        localVarFormParams.append(baseName, element, element.name);
                    }
                }
            }
            if (!(0, common_1.isBrowser)())
                Object.assign(localVarHeaderParameter, localVarFormParams.getHeaders());
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = localVarFormParams;
            (0, requestBeforeHook_1.requestBeforeHook)({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.ImageModelsApiAxiosParamCreator = ImageModelsApiAxiosParamCreator;
/**
 * ImageModelsApi - functional programming interface
 * @export
 */
const ImageModelsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.ImageModelsApiAxiosParamCreator)(configuration);
    return {
        /**
         * This endpoint will delete a model. This is not reversible.
         * @summary Delete a Model
         * @param {ImageModelsApiDeleteModelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteModel(requestParameters, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteModel(requestParameters.modelId, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * This endpoint will return a single model.
         * @summary Get a Single Model
         * @param {ImageModelsApiGetModelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getModel(requestParameters, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getModel(requestParameters.modelId, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * This endpoint will return a list of all models for the workspace.
         * @summary List All Models
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllModels(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAllModels(options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Upload a few image samples, and train a new model. Training usually takes 20-40 minutes. To be notified when the model completes training you must provide a `webhookUrl` in the training request, or check for completion by calling [Get a Single Model](https://reference.tryleap.ai/reference/get-model-1). After training completes, you can use the model to generate images with [Generate Images](https://reference.tryleap.ai/reference/inferencescontroller_create-1).
         * @summary Train Model
         * @param {ImageModelsApiTrainModelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trainModel(requestParameters = {}, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.trainModel(requestParameters.name, requestParameters.subjectKeyword, requestParameters.subjectType, requestParameters.webhookUrl, requestParameters.imageSampleUrls, requestParameters.imageSampleFiles, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.ImageModelsApiFp = ImageModelsApiFp;
/**
 * ImageModelsApi - factory interface
 * @export
 */
const ImageModelsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.ImageModelsApiFp)(configuration);
    return {
        /**
         * This endpoint will delete a model. This is not reversible.
         * @summary Delete a Model
         * @param {ImageModelsApiDeleteModelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteModel(requestParameters, options) {
            return localVarFp.deleteModel(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint will return a single model.
         * @summary Get a Single Model
         * @param {ImageModelsApiGetModelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getModel(requestParameters, options) {
            return localVarFp.getModel(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint will return a list of all models for the workspace.
         * @summary List All Models
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllModels(options) {
            return localVarFp.listAllModels(options).then((request) => request(axios, basePath));
        },
        /**
         * Upload a few image samples, and train a new model. Training usually takes 20-40 minutes. To be notified when the model completes training you must provide a `webhookUrl` in the training request, or check for completion by calling [Get a Single Model](https://reference.tryleap.ai/reference/get-model-1). After training completes, you can use the model to generate images with [Generate Images](https://reference.tryleap.ai/reference/inferencescontroller_create-1).
         * @summary Train Model
         * @param {ImageModelsApiTrainModelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trainModel(requestParameters = {}, options) {
            return localVarFp.trainModel(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};
exports.ImageModelsApiFactory = ImageModelsApiFactory;
/**
 * ImageModelsApiGenerated - object-oriented interface
 * @export
 * @class ImageModelsApiGenerated
 * @extends {BaseAPI}
 */
class ImageModelsApiGenerated extends base_1.BaseAPI {
    /**
     * This endpoint will delete a model. This is not reversible.
     * @summary Delete a Model
     * @param {ImageModelsApiDeleteModelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageModelsApiGenerated
     */
    deleteModel(requestParameters, options) {
        return (0, exports.ImageModelsApiFp)(this.configuration).deleteModel(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint will return a single model.
     * @summary Get a Single Model
     * @param {ImageModelsApiGetModelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageModelsApiGenerated
     */
    getModel(requestParameters, options) {
        return (0, exports.ImageModelsApiFp)(this.configuration).getModel(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint will return a list of all models for the workspace.
     * @summary List All Models
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageModelsApiGenerated
     */
    listAllModels(options) {
        return (0, exports.ImageModelsApiFp)(this.configuration).listAllModels(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Upload a few image samples, and train a new model. Training usually takes 20-40 minutes. To be notified when the model completes training you must provide a `webhookUrl` in the training request, or check for completion by calling [Get a Single Model](https://reference.tryleap.ai/reference/get-model-1). After training completes, you can use the model to generate images with [Generate Images](https://reference.tryleap.ai/reference/inferencescontroller_create-1).
     * @summary Train Model
     * @param {ImageModelsApiTrainModelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageModelsApiGenerated
     */
    trainModel(requestParameters = {}, options) {
        return (0, exports.ImageModelsApiFp)(this.configuration).trainModel(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.ImageModelsApiGenerated = ImageModelsApiGenerated;
