"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Leap
 * The Official Leap API
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This file is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImagesApiGenerated = exports.ImagesApiFactory = exports.ImagesApiFp = exports.ImagesApiAxiosParamCreator = void 0;
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
const FormData = require("form-data");
// @ts-ignore
const base_1 = require("../base");
const requestBeforeHook_1 = require("../requestBeforeHook");
/**
 * ImagesApi - axios parameter creator
 * @export
 */
const ImagesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Delete the image job and all related images.
         * @summary Delete Image Job
         * @param {string} modelId The ID of the model to use to generate images. This can be a custom model, or a public model. To view the list of public models, visit: https://docs.tryleap.ai/public-models
         * @param {string} inferenceId The ID of the image generation job to retrieve. This is the same ID that is returned when you submit a new image generation job.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete: (modelId, inferenceId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'modelId' is not null or undefined
            (0, common_1.assertParamExists)('delete', 'modelId', modelId);
            // verify required parameter 'inferenceId' is not null or undefined
            (0, common_1.assertParamExists)('delete', 'inferenceId', inferenceId);
            const localVarPath = `/api/v1/images/models/{modelId}/inferences/{inferenceId}`
                .replace(`{${"modelId"}}`, encodeURIComponent(String(modelId !== undefined ? modelId : `-modelId-`)))
                .replace(`{${"inferenceId"}}`, encodeURIComponent(String(inferenceId !== undefined ? inferenceId : `-inferenceId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = configuration && !(0, common_1.isBrowser)() ? { "User-Agent": configuration.userAgent } : {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            (0, requestBeforeHook_1.requestBeforeHook)({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Retrieve a single image generation job, including the urls for the images generated.
         * @summary Get Single Image Job
         * @param {string} modelId The ID of the model to use to generate images. This can be a custom model, or a public model. To view the list of public models, visit: https://docs.tryleap.ai/public-models
         * @param {string} inferenceId The ID of the image generation job to retrieve. This is the same ID that is returned when you submit a new image generation job.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findOne: (modelId, inferenceId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'modelId' is not null or undefined
            (0, common_1.assertParamExists)('findOne', 'modelId', modelId);
            // verify required parameter 'inferenceId' is not null or undefined
            (0, common_1.assertParamExists)('findOne', 'inferenceId', inferenceId);
            const localVarPath = `/api/v1/images/models/{modelId}/inferences/{inferenceId}`
                .replace(`{${"modelId"}}`, encodeURIComponent(String(modelId !== undefined ? modelId : `-modelId-`)))
                .replace(`{${"inferenceId"}}`, encodeURIComponent(String(inferenceId !== undefined ? inferenceId : `-inferenceId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = configuration && !(0, common_1.isBrowser)() ? { "User-Agent": configuration.userAgent } : {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            (0, requestBeforeHook_1.requestBeforeHook)({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Generate an image by providing a text description. Generations usually take bettween 4-20 seconds per image. Total generation time depends on the number of `steps` and `noOfImages` you select. This endpoint will submit the generation job and return immediately. To retrieve the results you must provide a webhook URL or query/poll the [Get a Single Image Job](https://reference.tryleap.ai/reference/inferencescontroller_findone-1) endpoint.
         * @summary Generate an Image
         * @param {string} modelId The ID of the model to use to generate images. This can be a custom model, or a public model. To view the list of public models, visit: https://docs.tryleap.ai/public-models
         * @param {CreateInferenceDto} createInferenceDto The parameters to use to generate the image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generate: (modelId, createInferenceDto, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'modelId' is not null or undefined
            (0, common_1.assertParamExists)('generate', 'modelId', modelId);
            // verify required parameter 'createInferenceDto' is not null or undefined
            (0, common_1.assertParamExists)('generate', 'createInferenceDto', createInferenceDto);
            const localVarPath = `/api/v1/images/models/{modelId}/inferences`
                .replace(`{${"modelId"}}`, encodeURIComponent(String(modelId !== undefined ? modelId : `-modelId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = configuration && !(0, common_1.isBrowser)() ? { "User-Agent": configuration.userAgent } : {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            (0, requestBeforeHook_1.requestBeforeHook)({
                requestBody: createInferenceDto,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createInferenceDto, localVarRequestOptions, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Fetch a list of inference jobs for a specific model.
         * @summary List All Image Jobs
         * @param {string} modelId The ID of the model to generate images. This can be a custom model or a public model. Visit: https://docs.tryleap.ai/public-models to view the list of public models.
         * @param {boolean} [onlyFinished] If set to true, only finished inferences will be returned. If set to false or not set, all inference jobs will be returned.
         * @param {number} [page] The page to request.
         * @param {number} [pageSize] The number of items to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAll: (modelId, onlyFinished, page, pageSize, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'modelId' is not null or undefined
            (0, common_1.assertParamExists)('listAll', 'modelId', modelId);
            const localVarPath = `/api/v1/images/models/{modelId}/inferences`
                .replace(`{${"modelId"}}`, encodeURIComponent(String(modelId !== undefined ? modelId : `-modelId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = configuration && !(0, common_1.isBrowser)() ? { "User-Agent": configuration.userAgent } : {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            if (onlyFinished !== undefined) {
                localVarQueryParameter['onlyFinished'] = onlyFinished;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            (0, requestBeforeHook_1.requestBeforeHook)({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.ImagesApiAxiosParamCreator = ImagesApiAxiosParamCreator;
/**
 * ImagesApi - functional programming interface
 * @export
 */
const ImagesApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.ImagesApiAxiosParamCreator)(configuration);
    return {
        /**
         * Delete the image job and all related images.
         * @summary Delete Image Job
         * @param {ImagesApiDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete(requestParameters, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.delete(requestParameters.modelId, requestParameters.inferenceId, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Retrieve a single image generation job, including the urls for the images generated.
         * @summary Get Single Image Job
         * @param {ImagesApiFindOneRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findOne(requestParameters, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.findOne(requestParameters.modelId, requestParameters.inferenceId, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Generate an image by providing a text description. Generations usually take bettween 4-20 seconds per image. Total generation time depends on the number of `steps` and `noOfImages` you select. This endpoint will submit the generation job and return immediately. To retrieve the results you must provide a webhook URL or query/poll the [Get a Single Image Job](https://reference.tryleap.ai/reference/inferencescontroller_findone-1) endpoint.
         * @summary Generate an Image
         * @param {ImagesApiGenerateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generate(requestParameters, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.generate(requestParameters.modelId, requestParameters, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Fetch a list of inference jobs for a specific model.
         * @summary List All Image Jobs
         * @param {ImagesApiListAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAll(requestParameters, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAll(requestParameters.modelId, requestParameters.onlyFinished, requestParameters.page, requestParameters.pageSize, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.ImagesApiFp = ImagesApiFp;
/**
 * ImagesApi - factory interface
 * @export
 */
const ImagesApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.ImagesApiFp)(configuration);
    return {
        /**
         * Delete the image job and all related images.
         * @summary Delete Image Job
         * @param {ImagesApiDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete(requestParameters, options) {
            return localVarFp.delete(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a single image generation job, including the urls for the images generated.
         * @summary Get Single Image Job
         * @param {ImagesApiFindOneRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findOne(requestParameters, options) {
            return localVarFp.findOne(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Generate an image by providing a text description. Generations usually take bettween 4-20 seconds per image. Total generation time depends on the number of `steps` and `noOfImages` you select. This endpoint will submit the generation job and return immediately. To retrieve the results you must provide a webhook URL or query/poll the [Get a Single Image Job](https://reference.tryleap.ai/reference/inferencescontroller_findone-1) endpoint.
         * @summary Generate an Image
         * @param {ImagesApiGenerateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generate(requestParameters, options) {
            return localVarFp.generate(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch a list of inference jobs for a specific model.
         * @summary List All Image Jobs
         * @param {ImagesApiListAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAll(requestParameters, options) {
            return localVarFp.listAll(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};
exports.ImagesApiFactory = ImagesApiFactory;
/**
 * ImagesApiGenerated - object-oriented interface
 * @export
 * @class ImagesApiGenerated
 * @extends {BaseAPI}
 */
class ImagesApiGenerated extends base_1.BaseAPI {
    /**
     * Delete the image job and all related images.
     * @summary Delete Image Job
     * @param {ImagesApiDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImagesApiGenerated
     */
    delete(requestParameters, options) {
        return (0, exports.ImagesApiFp)(this.configuration).delete(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieve a single image generation job, including the urls for the images generated.
     * @summary Get Single Image Job
     * @param {ImagesApiFindOneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImagesApiGenerated
     */
    findOne(requestParameters, options) {
        return (0, exports.ImagesApiFp)(this.configuration).findOne(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Generate an image by providing a text description. Generations usually take bettween 4-20 seconds per image. Total generation time depends on the number of `steps` and `noOfImages` you select. This endpoint will submit the generation job and return immediately. To retrieve the results you must provide a webhook URL or query/poll the [Get a Single Image Job](https://reference.tryleap.ai/reference/inferencescontroller_findone-1) endpoint.
     * @summary Generate an Image
     * @param {ImagesApiGenerateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImagesApiGenerated
     */
    generate(requestParameters, options) {
        return (0, exports.ImagesApiFp)(this.configuration).generate(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch a list of inference jobs for a specific model.
     * @summary List All Image Jobs
     * @param {ImagesApiListAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImagesApiGenerated
     */
    listAll(requestParameters, options) {
        return (0, exports.ImagesApiFp)(this.configuration).listAll(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.ImagesApiGenerated = ImagesApiGenerated;
