"use strict";
/**
 * Leap
 * The Official Leap API
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This file is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseIfJson = exports.readableStreamToString = exports.LeapError = void 0;
/**
 * This class provides a wrapper for network errors when making requests to Leap
 */
class LeapError extends Error {
    constructor(axiosError, responseBody) {
        var _a, _b, _c;
        super(axiosError.message);
        this.name = "LeapError";
        this.code = axiosError.code;
        this.method = (_a = axiosError.config.method) === null || _a === void 0 ? void 0 : _a.toUpperCase();
        this.url = axiosError.config.url;
        this.status = (_b = axiosError.response) === null || _b === void 0 ? void 0 : _b.status;
        this.statusText = (_c = axiosError.response) === null || _c === void 0 ? void 0 : _c.statusText;
        this.responseBody = responseBody;
    }
    toJSON() {
        return {
            name: this.name,
            message: this.message,
            method: this.method,
            url: this.url,
            code: this.code,
            status: this.status,
            statusText: this.statusText,
            responseBody: this.responseBody,
        };
    }
}
exports.LeapError = LeapError;
function readableStreamToString(stream) {
    return __awaiter(this, void 0, void 0, function* () {
        // Step 1: Create a new TextDecoder
        const decoder = new TextDecoder();
        // Step 2: Create a new ReadableStreamDefaultReader
        const reader = stream.getReader();
        // Step 3: Initialize an empty string to hold the result
        let result = "";
        try {
            while (true) {
                // Step 4: Read data from the stream
                const { done, value } = yield reader.read();
                // If there is no more data to read, break the loop
                if (done)
                    break;
                // Convert the chunk of data to a string using the TextDecoder
                const chunk = decoder.decode(value, { stream: true });
                // Concatenate the chunk to the result
                result += chunk;
            }
        }
        finally {
            // Step 5: Release the ReadableStreamDefaultReader when done or in case of an error
            reader.releaseLock();
        }
        // Return the final result as a string
        return result;
    });
}
exports.readableStreamToString = readableStreamToString;
function parseIfJson(input) {
    if (typeof input !== "string") {
        // If the input is not a string, return the original input
        return input;
    }
    try {
        // Attempt to parse the input as JSON
        const parsedJSON = JSON.parse(input);
        // Check if the parsed result is an object (not an array or primitive value)
        if (typeof parsedJSON === "object" && parsedJSON !== null) {
            return parsedJSON;
        }
        else {
            // Return the original input if the parsed result is not an object
            return input;
        }
    }
    catch (error) {
        // Return the original input if parsing fails (invalid JSON)
        return input;
    }
}
exports.parseIfJson = parseIfJson;
