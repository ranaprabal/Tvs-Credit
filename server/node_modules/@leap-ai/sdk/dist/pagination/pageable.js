"use strict";
/**
 * Leap
 * The Official Leap API
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This file is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Pageable = void 0;
class Pageable {
    previous() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.hasPrevious())
                return this;
            if (this.previousParameters === null)
                return this;
            const response = yield this.makeRequest(this.previousParameters);
            return this.withData(response.data);
        });
    }
    next() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.hasNext())
                return this;
            if (this.nextParameters === null)
                return this;
            const response = yield this.makeRequest(this.nextParameters);
            return this.withData(response.data);
        });
    }
    /**
     * Helper for invoking a request. Handles request body and parameter based pagination
     */
    makeRequest(parameters) {
        // Handle request body pagination
        if (this.initialParameters.requestBody !== undefined) {
            return this._request(Object.assign(Object.assign({}, this.initialParameters), { requestBody: Object.assign(Object.assign({}, this.initialParameters.requestBody), parameters) }));
        }
        return this._request(Object.assign(Object.assign({}, this.initialParameters), parameters));
    }
    /**
     * Helper for creating new page
     */
    withData(data) {
        return this.make({
            data,
            initialParameters: this.initialParameters,
            request: this._request,
        });
    }
    constructor({ data, initialParameters, request, }) {
        this.data = data;
        this._request = request;
        this.initialParameters = initialParameters;
    }
}
exports.Pageable = Pageable;
