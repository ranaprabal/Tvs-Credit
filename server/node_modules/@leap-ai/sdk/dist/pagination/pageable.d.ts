/**
 * Leap
 * The Official Leap API
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This file is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */
import { AxiosPromise } from "axios";
import { PageBase, PageInfo, PageParameterProperties, PageParameters } from "./page-types";
export type PageParametersBase<Parameters> = Parameters & {
    requestBody?: Parameters;
};
export type PageRequest<Data extends PageInfo, Parameters extends PageParameters> = (parameters: Parameters) => AxiosPromise<Data>;
export declare abstract class Pageable<Data extends PageInfo, Parameters extends PageParameters> {
    readonly data: Data;
    protected readonly initialParameters: Parameters;
    private readonly _request;
    previous(): Promise<PageBase<Data, Parameters>>;
    next(): Promise<PageBase<Data, Parameters>>;
    /**
     * Generate minimal set of parameters needed to get the previous page
     */
    protected abstract get previousParameters(): PageParameterProperties | null;
    /**
     * Generate minimal set of parameters needed to get the next page
     */
    protected abstract get nextParameters(): PageParameterProperties | null;
    /**
     * Is there a previous page based on PageInfo?
     */
    abstract hasPrevious(): boolean;
    /**
     * Is there a next page based on PageInfo?
     */
    abstract hasNext(): boolean;
    /**
     * Helper for invoking a request. Handles request body and parameter based pagination
     */
    private makeRequest;
    /**
     * Helper for creating new page
     */
    private withData;
    constructor({ data, initialParameters, request, }: {
        data: Data;
        initialParameters: Parameters;
        request: PageRequest<Data, Parameters>;
    });
    abstract make(parameters: {
        data: Data;
        initialParameters: Parameters;
        request: PageRequest<Data, Parameters>;
    }): Pageable<Data, Parameters>;
}
